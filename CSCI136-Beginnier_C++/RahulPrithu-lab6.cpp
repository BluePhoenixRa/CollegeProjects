/*
Author: Rahul Prithu
File: RahulPrithu-lab6.cpp
*/

// Lab 6
// When executed, this program generates 1000 random characters
// It then prints out the frequency of each character from A to Z in a table
// Then it deletes all the repeated characters using the delete repeat function

#include <iostream>
#include <cstdlib>							// Must be included to use the rand function, in this program
using namespace std;

void generateRandomCharacters(char *s, int arraySize);						// Generate random characters prototype

void printCharacterFrequency(char *s, int arraySize);						// Print character frequency prototype

void deleteRepeats(char *s, int &arraySize);								// Delete repeats prototype

void printArray(char *s, int arraySize);									// Print array prototype

int main()
{
	char cArray[1000];
	int arrayLength = 1000;							// Limiting array length to 1000
	
	srand(100);										// This sets a specific sequence of random numbers
	
	generateRandomCharacters(cArray, arrayLength);	// Generates random freqyency
	
	cout << "\nThe Random Array:\n";	
	printArray(cArray, arrayLength);				// Prints 1000 "random" characters
	
	printCharacterFrequency(cArray, arrayLength);	// Pritns Char and Frequency table

	deleteRepeats(cArray, arrayLength);				// Deletes all the repeated characters
	
	cout << "\nThe Compressed Array:\n";
	printArray(cArray, arrayLength);				// Prints new list of "random" characters, without repeats
	
		printCharacterFrequency(cArray, arrayLength); // Prints the new Char and Frequency table after delete

	return 0;
}

/*
Generate Random Characters

This function takes in an array parameter to an array of characters and an integer corresponding to
the size of the array. The function then populates the array with randomly generated characters.

Using the rand function, it generate random numbers from 97 to 122, then converts them to characters

*/
void generateRandomCharacters(char *s, int arraySize)
{
	int num;
	
	for (int i = 0; i < arraySize; i++)
	{
		num = 97 + rand() % 26;
		s[i] = static_cast<char>(num);
	}
}

/*
Print Character Frequency

This function takes in an array parameter to an array of characters and an integer corresponding to 
the size of the array. This function then counts the occurrences (frequency) of each character in the array.

*/
void printCharacterFrequency(char *s, int arraySize)
{
	int freq[26];
	int i = 0;
	int iCount = 0;
	char findChar;
	int cumFreq = 0;
	
	for(iCount = 0; iCount < 26; iCount++)					// Initialize the array "freq"
		freq[iCount] = 0;
	
	for(iCount = 0; iCount < 26; iCount++)
	{
		findChar = static_cast<char>(97 + iCount);
	
		for(i = 0; i < arraySize; i++)
		{
			if(findChar == s[i])
				freq[iCount]++;
		}
	}
	
	cout << "\nFrequency Table:\nChar \tFrequency\n";		// Frequency Table output
	for(iCount = 0; iCount < 26; iCount++)
	{	
		cout << static_cast<char>(97 + iCount) << "\t" << freq[iCount] << "\t";
		cumFreq = cumFreq + freq[iCount];
		cout << cumFreq << "\n";
	}
}

/*
Delete Repeats

This function takes two parameters: a char array parameter pointing to the array of characters 
and an int reference parameter indicating the number of elements used in the array.

*/
void deleteRepeats(char *s, int &arraySize)
{
	int startPos = 0;
	int nDeleted = 0;
	
	while(startPos < arraySize)
	{
		nDeleted = 0;
		for(int i = startPos + 1; i < arraySize; i++)
		{
			if(s[i] == s[startPos])
				nDeleted++;
			else
				s[i - nDeleted] = s[i];
	
		}
		arraySize -= nDeleted;
		startPos++;
	}
}

/*
Print Array

Prints the characters generated by the generateRandomCharacter function.

*/

void printArray(char *s, int arraySize)
{
	for (int i = 0; i < arraySize; i++)
	{
		cout << s[i];
	}
	cout << "\n";
}
